import os

import pandas
import streamlit as st
from pandas import DataFrame

from dao.models.cable_line import CableLine
from dao.models.employee import Employee
from dao.models.workstation import Workstation
from dao.utils.implemented import cable_line_service, employee_service, workstation_service
from dotenv import load_dotenv

# Page settings
# ----------------------------------------------------------------------------------------------------------------------
st.set_page_config(
    layout='wide'
)
load_dotenv()

# Get data
# ----------------------------------------------------------------------------------------------------------------------
cable_lines: list[CableLine] = cable_line_service.get_all()
employees: list[Employee] = employee_service.get_all()
workstations: list[Workstation] = workstation_service.get_all()

df: DataFrame = pandas.DataFrame([(
    cable_line.id,
    cable_line.socket_number,
    cable_line.port_number_socket,
    cable_line.port_number_patch_panel,
    cable_line.length,
    cable_line.employee.full_name,
    cable_line.employee.department.name,
    cable_line.workstation.name,
    cable_line.workstation.ip_address,
    cable_line.workstation.mac_address
) for cable_line in cable_lines],
    columns=[
        'ID',
        '‚Ññ —Ä–æ–∑–µ—Ç–∫–∏',
        '‚Ññ –ø–æ—Ä—Ç–∞ —Ä–æ–∑–µ—Ç–∫–∏',
        '‚Ññ –ø–æ—Ä—Ç–∞ –Ω–∞ –ø–∞—Ç—á–ø–∞–Ω–µ–ª–∏',
        '–î–ª–∏–Ω–∞',
        '–§–ò–û',
        '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ',
        '–ò–º—è –ê–†–ú',
        'IP –∞–¥—Ä–µ—Å –ê–†–ú',
        'MAC –∞–¥—Ä–µ—Å  –ê–†–ú'
    ])

# Main block
# ----------------------------------------------------------------------------------------------------------------------
st.title('–ö–∞–±–µ–ª—å–Ω—ã–π –∂—É—Ä–Ω–∞–ª')
st.dataframe(
    df,
    use_container_width=True,
    column_config={
        '‚Ññ —Ä–æ–∑–µ—Ç–∫–∏': st.column_config.NumberColumn(
            format="%d",
        ),
        '‚Ññ –ø–æ—Ä—Ç–∞ —Ä–æ–∑–µ—Ç–∫–∏': st.column_config.NumberColumn(
            format="%d",
        ),
        '‚Ññ –ø–æ—Ä—Ç–∞ –Ω–∞ –ø–∞—Ç—á–ø–∞–Ω–µ–ª–∏': st.column_config.NumberColumn(
            format="%d",
        ),
        '–î–ª–∏–Ω–∞': st.column_config.NumberColumn(
            format="%d",
        ),
    },
    hide_index=True,
)

# Admin block
# ------------------------------------------------------------------------------
st.divider()
st.title('–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')

with st.expander('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–±–µ–ª—è–º–∏'):
    create, update, delete = st.columns(3)

    # Create table
    # --------------------------------------------------------------------------
    with create:
        st.header('–î–æ–±–∞–≤–∏—Ç—å')

        with st.form(key='add_form'):
            create_socket_number: int = st.number_input(
                '‚Ññ —Ä–æ–∑–µ—Ç–∫–∏',
                key='create_socket_number',
                value=1,
                min_value=1,
                format='%d',
            )
            create_port_number_socket: int = st.number_input(
                '‚Ññ –ø–æ—Ä—Ç–∞ —Ä–æ–∑–µ—Ç–∫–∏',
                key='create_port_number_socket',
                value=1,
                min_value=1,
                format='%d',
            )
            create_port_number_patch_panel: int = st.number_input(
                '‚Ññ –ø–æ—Ä—Ç–∞ –Ω–∞ –ø–∞—Ç—á–ø–∞–Ω–µ–ª–∏',
                key='create_port_number_patch_panel',
                value=1,
                min_value=1,
                format='%d',
            )
            create_length: int = st.number_input(
                '–î–ª–∏–Ω–∞',
                key='create_length',
                value=1,
                min_value=1,
                format='%d',
            )
            create_employee = st.selectbox(
                '–§–ò–û',
                options=[employee.full_name for employee in employees],
                key='create_employee',
            )
            create_workstation = st.selectbox(
                '–ò–º—è –ê–†–ú',
                options=[workstation.name for workstation in workstations],
                key='create_workstation'
            )
            admin_password: str = st.text_input(
                '–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                key='password',
                type='password'
            )

            create_submit_button: bool = st.form_submit_button(
                label='–î–æ–±–∞–≤–∏—Ç—å –ª–∏–Ω–∏—é'
            )

            if create_submit_button:
                if not admin_password or admin_password != os.environ.get('ADMIN_PASSWORD'):
                    st.warning(
                        '–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å',
                        icon='‚ö†Ô∏è'
                    )
                else:
                    data: dict = {
                        'socket_number': st.session_state.create_socket_number,
                        'port_number_socket': st.session_state.create_port_number_socket,
                        'port_number_patch_panel': st.session_state.create_port_number_patch_panel,
                        'length': st.session_state.create_length,
                        'employee_id': [
                            employee.id for employee in employees
                            if employee.full_name == st.session_state.create_employee
                        ][0],
                        'workstation_id': [
                            workstation.id for workstation in workstations
                            if workstation.name == st.session_state.create_workstation
                        ][0],
                    }

                    try:
                        cable_line_service.create(data)

                        st.success(
                            '–õ–∏–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞',
                            icon='‚úÖ'
                        )
                    except RuntimeError:
                        st.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏', icon='üö®')

    # Update table
    # --------------------------------------------------------------------------
    with update:
        st.header('–û–±–Ω–æ–≤–∏—Ç—å')

        # select_department: list[Department] = st.selectbox(
        #     '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ',
        #     options=[department.name for department in departments],
        #     key='select_department',
        # )

        with st.form(key='edit_form'):
            update_cable_line_id: int = st.number_input(
                'ID –ª–∏–Ω–∏–∏',
                key='update_cable_line_id',
                value=1,
                min_value=1,
                format='%d',
            )
            update_socket_number: int = st.number_input(
                '‚Ññ —Ä–æ–∑–µ—Ç–∫–∏',
                key='update_socket_number',
                value=1,
                min_value=1,
                format='%d',
            )
            update_port_number_socket: int = st.number_input(
                '‚Ññ –ø–æ—Ä—Ç–∞ —Ä–æ–∑–µ—Ç–∫–∏',
                key='update_port_number_socket',
                value=1,
                min_value=1,
                format='%d',
            )
            update_port_number_patch_panel: int = st.number_input(
                '‚Ññ –ø–æ—Ä—Ç–∞ –Ω–∞ –ø–∞—Ç—á–ø–∞–Ω–µ–ª–∏',
                key='update_port_number_patch_panel',
                value=1,
                min_value=1,
                format='%d',
            )
            update_length: int = st.number_input(
                '–î–ª–∏–Ω–∞',
                key='update_length',
                value=1,
                min_value=1,
                format='%d',
            )
            update_employee = st.selectbox(
                '–§–ò–û',
                options=[employee.full_name for employee in employees],
                key='update_employee',
            )
            update_workstation = st.selectbox(
                '–ò–º—è –ê–†–ú',
                options=[workstation.name for workstation in workstations],
                key='update_workstation'
            )
            update_admin_password: str = st.text_input(
                '–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                key='update_admin_password',
                type='password'
            )

            update_submit_button: bool = st.form_submit_button(
                label='–û–±–Ω–æ–≤–∏—Ç—å –ª–∏–Ω–∏—é'
            )

            if update_submit_button:
                if not update_admin_password or update_admin_password != os.environ.get('ADMIN_PASSWORD'):
                    st.warning(
                        '–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å',
                        icon='‚ö†Ô∏è'
                    )
                else:
                    old_data: dict = {
                        'id': st.session_state.update_cable_line_id,
                    }
                    update_data: dict = {
                        'socket_number': st.session_state.update_socket_number,
                        'port_number_socket': st.session_state.update_port_number_socket,
                        'port_number_patch_panel': st.session_state.update_port_number_patch_panel,
                        'length': st.session_state.update_length,
                        'employee_id': [
                            employee.id for employee in employees
                            if employee.full_name == st.session_state.update_employee
                        ][0],
                        'workstation_id': [
                            workstation.id for workstation in workstations
                            if workstation.name == st.session_state.update_workstation
                        ][0],
                    }

                    try:
                        cable_line_service.update(old_data, update_data)

                        st.success(
                            '–î–∞–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
                            icon='‚úÖ'
                        )
                    except RuntimeError:
                        st.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', icon='üö®')

    # Delete table
    # --------------------------------------------------------------------------
    with delete:
        st.header('–£–¥–∞–ª–∏—Ç—å')

        with st.form(key='delete_form'):
            uid: int = st.number_input(
                'ID –ª–∏–Ω–∏–∏',
                key='uid',
                min_value=1
            )
            delete_admin_password: str = st.text_input(
                '–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                key='delete_password',
                type='password'
            )

            delete_submit_button: bool = st.form_submit_button(
                label='–£–¥–∞–ª–∏—Ç—å –ª–∏–Ω–∏—é'
            )

            if delete_submit_button:
                if not delete_admin_password or delete_admin_password != os.environ.get('ADMIN_PASSWORD'):
                    st.warning(
                        '–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å',
                        icon='‚ö†Ô∏è'
                    )
                else:
                    cable_line_service.delete(st.session_state.uid)

                    st.success(
                        '–õ–∏–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞',
                        icon='‚úÖ'
                    )
